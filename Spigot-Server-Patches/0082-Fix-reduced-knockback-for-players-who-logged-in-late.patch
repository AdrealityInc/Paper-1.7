From 3fcde38b184d070c6b14c77fbddceaab56157ded Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Sun, 2 Aug 2015 16:56:49 -0700
Subject: [PATCH] Fix reduced knockback for players who logged in later


diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java
index d429613..3ce0082 100644
--- a/src/main/java/net/minecraft/server/EntityHuman.java
+++ b/src/main/java/net/minecraft/server/EntityHuman.java
@@ -948,6 +948,13 @@ public abstract class EntityHuman extends EntityLiving implements ICommandListen
                         // CraftBukkit end
                     }
 
+                    // PaperSpigot start
+                    // Save the victim's velocity before they are potentially knocked back
+                    double victimMotX = entity.motX;
+                    double victimMotY = entity.motY;
+                    double victimMotZ = entity.motZ;
+                    // PaperSpigot end
+
                     boolean flag2 = entity.damageEntity(DamageSource.playerAttack(this), f);
 
                     if (flag2) {
@@ -958,6 +965,25 @@ public abstract class EntityHuman extends EntityLiving implements ICommandListen
                             this.setSprinting(false);
                         }
 
+                        // PaperSpigot start
+                        // If the attack caused knockback, send the new velocity to the victim's client immediately,
+                        // and undo the change. Otherwise, if movement packets from the victim are processed before
+                        // the end of the tick, then friction may reduce the velocity considerably before it's sent
+                        // to the client, particularly if the victim was standing on the ground when those packets
+                        // were generated. And because this glitch is also likely to make server-side velocity very
+                        // inconsistent, we simply reverse the knockback after sending it so that KB, like most other
+                        // things, doesn't affect server velocity at all.
+                        if (entity instanceof EntityPlayer && entity.velocityChanged) {
+                            EntityPlayer attackedPlayer = (EntityPlayer) entity;
+
+                            attackedPlayer.playerConnection.sendPacket(new PacketPlayOutEntityVelocity(attackedPlayer));
+                            attackedPlayer.velocityChanged = false;
+                            attackedPlayer.motX = victimMotX;
+                            attackedPlayer.motY = victimMotY;
+                            attackedPlayer.motZ = victimMotZ;
+                        }
+                        // PaperSpigot end
+
                         if (flag) {
                             this.b(entity);
                         }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 826ea3c..cea2c56 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -59,6 +59,7 @@ import org.bukkit.metadata.MetadataValue;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.messaging.StandardMessenger;
 import org.bukkit.scoreboard.Scoreboard;
+import org.bukkit.util.Vector; // PaperSpigot
 
 @DelegateDeserialization(CraftOfflinePlayer.class)
 public class CraftPlayer extends CraftHumanEntity implements Player {
@@ -1336,6 +1337,16 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         // Spigot end
     }
 
+    @Override
+    public void setVelocity(Vector vel) {
+        // Send the new velocity to the player's client immediately, so it isn't affected by
+        // any movement packets from this player that may be processed before the end of the tick.
+        // Without this, player velocity changes tend to be very inconsistent.
+        super.setVelocity(vel);
+        this.getHandle().playerConnection.sendPacket(new PacketPlayOutEntityVelocity(this.getHandle()));
+        this.getHandle().velocityChanged = false;
+    }
+
     // Spigot start
     private final Player.Spigot spigot = new Player.Spigot()
     {
-- 
1.9.5.msysgit.1

